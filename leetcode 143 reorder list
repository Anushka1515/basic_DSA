/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */


ListNode* reverseList(ListNode* head) {
    ListNode *prev = nullptr;
    ListNode *curr = head;
    while (curr != nullptr) {
        ListNode *nextTemp = curr->next;
        curr->next = prev;
        prev = curr;
        curr = nextTemp;
    }
    return prev;
}

class Solution {
public:
    void reorderList(ListNode* head) {
        if (head == nullptr || head->next == nullptr)
        return;


    ListNode *slow = head;
    ListNode *fast = head;
    while (fast->next && fast->next->next) {
        slow = slow->next;
        fast = fast->next->next;
    }


    ListNode *second_half = slow->next;
    slow->next = nullptr;


    second_half = reverseList(second_half);


    ListNode *first_half = head;
    while (second_half) {
        ListNode *temp1 = first_half->next;
        ListNode *temp2 = second_half->next;
        first_half->next = second_half;
        second_half->next = temp1;
        first_half = temp1;
        second_half = temp2;
    }
    }
};
