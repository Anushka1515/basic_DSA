/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        vector<int> treearr;
        vector<int> ans;
        maketree(root, treearr);
        unordered_map<int,int> hash;
        for(int x: treearr){
            hash[x]++;    
        }
        int maxv=hash[treearr[0]];
        for (auto x : hash) {
            if (x.second > maxv) {
                maxv = x.second;
                ans.clear(); 
                ans.push_back(x.first);
            } else if (x.second == maxv) {
                ans.push_back(x.first); 
            }
        }

        return ans;

        
    }
private:
    void maketree(TreeNode* root, vector<int>& treearr) {
        if (root == nullptr) {
            return;
        }

        treearr.push_back(root->val);  
        maketree(root->left, treearr); 
        maketree(root->right, treearr);
    }
};
